@page
@model findteachersforresearch.Pages.IndexModel
<div id="indexPageContainer">
    <head><link rel="stylesheet" href="/css/site.css" /></head>
    <div><h5>Find teachers and trainees for research...</h5></div>
<div style="display: flex; align-items: center; gap: 10px;">
<form method="get" id="refreshForm">
    
    <div style="display: flex; align-items: center;">
        <label for="recordCount" style="margin-right: 10px;">Records</label>
        <input type="number" id="recordCount" name="recordCount" value=@Model.RecordCount style="width: 100px; margin-right: 20px;"/>
        <label for="profStatus" style="margin-right: 10px;">Status</label>
        <select id="profStatus" name="SelectedProfStatus" class="form-control" style="width: 200px; margin-right: 20px;">
            @foreach (var status in Enum.GetValues(typeof(findteachersforresearch.Models.ProfStatus.ProfStatusName)))
            {
                if (status.ToString() == Model.SelectedProfStatus.ToString())
                {
                    <option value="@status" selected="selected">@status</option>
                }
                else
                {
                    <option value="@status">@status</option>
                }
            }
        </select>
        <!-- NPQGroups Checkboxes -->
        
            
            <label style="width: 200px; margin-right: 10px;">
                <input type="checkbox" name="SelectedNPQGroup" value="Leadership" onchange="toggleNPQCheckbox(this)" style=" margin-right: 10px;"/>
                Leadership NPQ's
            </label>
            <label style="width: 200px; margin-right: 10px;">
                <input type="checkbox" name="SelectedNPQGroup" value="Specialised" onchange="toggleNPQCheckbox(this)" style=" margin-right: 10px;"/>
                Specialised NPQ's
            </label>
        
        <input type="text" id="searchString" name="searchString" value="@Model.SearchString" style="width: 400px; margin-right: 30px;" placeholder="Enter a name or TRN..."/>
        <button type="submit" class="btn btn-primary">Search</button>
    </div>
</form>

<div class="d-flex align-items-right gap-2">
    <form method="get" id="actionForm" action="/SelectedRows">
        <input type="hidden" name="selectedIds" id="selectedIdsInput" value="" />
        <button class="btn btn-secondary" id="createRound" disabled type="submit">New Round</button>
    </form>
    <button class="btn btn-secondary" id="addToRound" disabled type="button">Add To Round</button>
</div>
</div> <!-- Flex area for buttons and filters -->
        <div class="modal fade" id="addToRoundModal" tabindex="-1" aria-labelledby="addToRoundModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addToRoundModalLabel">Add to Existing Research Round</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <label for="researchRoundSelect">Select Research Round:</label>
                        <select id="researchRoundSelect" class="form-select">
                            @foreach (var round in Model.AvailableResearchRounds)
                            {
                                <option value="@round.Id">@round.Name</option>
                            }
                        </select>
                    </div>
                    <div class="modal-footer">
                        <form method="post" action="/Index">
                            @Html.AntiForgeryToken()
                            <input type="hidden" name="researchRoundId" id="modalResearchRoundId"/>
                            <input type="hidden" name="selectedPersonIds" id="selectedPersonHiddenInput"/>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                            <button type="submit" class="btn btn-primary" id="confirmAddToRound">Confirm</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>
<!-- Spinner-->
<div id="spinner" style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.5); z-index: 1000; align-items: center; justify-content: center;">
    <div style="width: 40px; height: 40px; border: 8px solid #f3f3f3; border-top: 8px solid #3498db; border-radius: 50%; animation: spin 1s linear infinite;"></div>
    <p style="color: white; font-size: 18px; margin-top: 10px;">Loading...</p>
</div>

<style>
    /* Prevent the main page from scrolling */
    body, html {
        overflow: hidden;
        height: 100%; /* Ensures the full viewport height is respected */
        margin: 0;
    }

    /* Ensure the table container can scroll independently */
    div[style*="overflow-y: auto"] {
        flex: 1;
        overflow-y: auto;
    }
   
</style>
<div style="display: flex; flex-direction: column; height: 100vh;">
    
    <!-- Table Container -->
    <div style="flex: 1; overflow-y: auto; ">

        <table class="table" id="mainIndexTable" style="margin-top: 20px;">
            <thead>
            <tr>
                <th style="width: 50px;"><input type="checkbox" id="selectAllCheckbox" /></th>
                <th>Name</th>
                <th>Age</th>
                <th>TRN</th>
                <th>Email</th>
                <th>Status</th>
                <th>Qualifications</th>
                <th>Known Employments</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var person in Model.Persons)
            {
                <tr>
                    <td>
                        <div>
                            @if (person.ResearchRounds.Count == 0)
                            {
                                <input type="checkbox" class="select-row" data-id="@person.PersonId" />
                            }
                            else
                            {
                                <input type="checkbox" class="select-row" data-id="@person.PersonId" disabled />
                            }
                        </div>
                    </td>
                    <td>@($"{person.FirstName} {person.LastName}")</td>
                    <td>@(DateTime.Now.Year - person.DateOfBirth.Year)</td>
                    <td>@person.ReferenceNumber</td>
                    <td><a href="mailto:@person.EmailWork">@person.EmailWork</a></td>
                    <td>@person.ProfStatus?.StatusName</td>

                    <td>
                        @if (person.Qualification != null)
                        {
                            @((person.Qualification.QTSDate != null
                                ? $"QTS awarded {person.Qualification?.QTSDate.Value.ToString("d")}"
                                : string.Empty))
                            @((person.Qualification?.EYTSDate != null
                                ? $"EYTS awarded {person.Qualification?.EYTSDate.Value.ToString("d")}"
                                : string.Empty))
                            @(person.Qualification?.MQ > 0 ? "MQ" : string.Empty)
                            @(person.Qualification?.NPQH > 0 ? " NPQH" : string.Empty)
                            @(person.Qualification?.NPQEL > 0 ? " NPQEL" : string.Empty)
                            @(person.Qualification?.NPQML > 0 ? " NPQML" : string.Empty)
                            @(person.Qualification?.NPQSL > 0 ? " NPQSL" : string.Empty)
                            @(person.Qualification?.NPQLBC > 0 ? " NPQLBC" : string.Empty)
                            @(person.Qualification?.NPQLTD > 0 ? " NPQLTD" : string.Empty)
                        }
                        else
                        {
                            <span>No Known Qualifications</span>
                        }
                    </td>
                    <td class="employment-cell">
                        @if (person.Employments != null && person.Employments.Any())
                        {
                            @string.Join(", ", person.Employments.Select(e =>
                                $"{e.EstablishmentName} , " +
                                $"{e.EmploymentTypeName} , ({e.StartDate.ToShortDateString()} , {(e.EndDate == null ? "Current" : e.EndDate.Value.ToShortDateString())}) " +
                                $"{(e.PhaseOfEducation != null ? "" + e.PhaseOfEducation + "," : string.Empty)}" +
                                $"{(e.NumberOfPupils != null ? " Pupils " + e.NumberOfPupils + "," : string.Empty)}" +
                                $"{(e.FSMPercentage != null ? " FSM% " + e.FSMPercentage + "," : string.Empty)}" +
                                $"{(e.Urn != null ? " URN " + e.Urn + "," : string.Empty)}" +
                                $"{(e.EmployerPostcode != null ? " Postcode " + e.EmployerPostcode : string.Empty)}"))
                        }
                        else
                        {
                            <span>No Employments</span>
                        }
                    </td>

                </tr>
            }
            </tbody>
        </table>
    </div>
</div>
</div>
<script>
<!--Constants - javascript-->
const selectAllCheckbox = document.getElementById('selectAllCheckbox');
const selectedIds = []; // Global array to store selected IDs
const tableElement = document.querySelector('#mainIndexTable'); //could re-factor as not sure waiting for the DOM to load below is actually needed?
const createButton = document.getElementById('createRound');
const addToButton = document.getElementById('addToRound');
const checkboxes = document.querySelectorAll('.select-row:not(:disabled)');
const addToRoundModal = new bootstrap.Modal(document.getElementById('addToRoundModal'));

<!--Event Listeners - javascript-->
    <!--Handle the spinner-->
document.getElementById("refreshForm").addEventListener("submit", function() {
    document.getElementById("spinner").style.display = "flex";
});

document.getElementById("actionForm").addEventListener("submit", function() {
    document.getElementById("spinner").style.display = "flex";
});

document.getElementById("addToRoundModal").addEventListener("submit", function() {
    document.getElementById("spinner").style.display = "flex";
});

document.addEventListener('DOMContentLoaded', function () {
    const tableElement = document.querySelector('#mainIndexTable');
    if (tableElement) {
        // Event delegation for individual checkboxes
        tableElement.addEventListener('change', function (event) {
            const checkbox = event.target;

            // Ensure the event is triggered by a checkbox with the class 'select-row'
            if (checkbox.classList.contains('select-row') && !checkbox.disabled) {
                const id = checkbox.getAttribute('data-id');
                if (checkbox.checked) {
                    if (!selectedIds.includes(id)) {
                        selectedIds.push(id); // Add ID to selected list
                    }
                } else {
                    const index = selectedIds.indexOf(id);
                    if (index > -1) {
                        selectedIds.splice(index, 1); // Remove ID from selected list
                    }
                }
                console.log('Selected IDs:', selectedIds); // Debug log
            }
            toggleActionButtons();
        });

    } else {
        console.error('Table element not found');
    }
});

// "Select All" checkbox functionality
selectAllCheckbox.addEventListener('change', function () {
    const isChecked = selectAllCheckbox.checked;
    const checkboxes = tableElement.querySelectorAll('.select-row:not(:disabled)');

    checkboxes.forEach(checkbox => {
        checkbox.checked = isChecked;
        const id = checkbox.getAttribute('data-id');
        if (isChecked && !selectedIds.includes(id)) {
            selectedIds.push(id); // Add ID when checked
        } else if (!isChecked) {
            const index = selectedIds.indexOf(id);
            if (index > -1) {
                selectedIds.splice(index, 1); // Remove ID when unchecked
            }
        }
    });
    console.log('Selected IDs:', selectedIds); // Debug log
});


//Select all checkboxes will re-evalutae the enabled state of the buttons that action things...
selectAllCheckbox.addEventListener('change', function() {
    const isChecked = selectAllCheckbox.checked;
    const checkboxes = document.querySelectorAll('.select-row:not(:disabled)');
    checkboxes.forEach(checkbox => {
        checkbox.checked = isChecked;
    });
   toggleActionButtons();
});

//Create Research round, will call a GET with an action of /SelectedRows, using selectedIds (hidden input) as query params
createButton.addEventListener('click', function() {
    const selectedIdsInput = document.getElementById('selectedIdsInput');
    const selectedIds = Array.from(document.querySelectorAll('.select-row:checked:not(:disabled)'))
        .map(checkbox => checkbox.dataset.id);

    if (selectedIds.length > 0) {
        selectedIdsInput.value = selectedIds.join(',');
        console.log('Submitting Form with Selected IDs:', selectedIdsInput.value);
    } else {
        console.error('No IDs selected.');
    }
});

//Add to research round - show modal...
addToButton.addEventListener('click', function() {
    console.error('Add To Round Button Clicked');
    addToRoundModal.show();
});

//Add to research round modal confirm (REFACTOR THIS)
confirmAddToRound.addEventListener('click', function() {
    const selectedPersonIdsInput = document.getElementById('selectedIdsInput');
    const selectedPersonIds = Array.from(document.querySelectorAll('.select-row:checked:not(:disabled)'))
        .map(checkbox => checkbox.dataset.id);
    const selectedRoundId = researchRoundSelect.value;

    if (selectedPersonIds.length > 0) {
        selectedPersonIdsInput.value = selectedPersonIds.join(',');
        console.log('Submitting Form with Selected Person IDs:', selectedPersonIdsInput.value);
    } else {
        console.error('No Person IDs selected.');
    }
    //Push to modal
    document.getElementById('modalResearchRoundId').value = selectedRoundId;
    document.getElementById('selectedPersonHiddenInput').value = selectedPersonIds.join(',');
});

<!--Functions - javascript-->
function toggleNPQCheckbox(selectedCheckbox) {
    const checkboxes = document.querySelectorAll('input[name="SelectedNPQGroup"]');

    checkboxes.forEach(checkbox => {
        if (checkbox !== selectedCheckbox) {
            checkbox.checked = false;
        }
    });
}
function toggleActionButtons() {
    
    const anyChecked = Array.from(checkboxes).some(checkbox => checkbox.checked);
    createButton.disabled = !anyChecked;
    addToButton.disabled = !anyChecked;
    console.log('Action Buttons Toggled:', selectedIds);
}
</script>
